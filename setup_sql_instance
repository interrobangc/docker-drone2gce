#!/usr/bin/env bash

# configure sql instance
drone_db_host=$(gcloud sql instances list | grep drone-${project} | awk '{print $5}')

if [ "$drone_db_host" = "" ]; then
    echo "Could not find sql instance drone-${project}, creating it..."
    gcloud sql instances create \
        drone-${project} \
        --region ${region} \
        --gce-zone ${zone} \
        --database-version "MYSQL_5_7" \
        --tier "${drone_sql_tier}" \
        --storage-type "${drone_sql_storage_type}" \
        --storage-size "${drone_sql_storage_size}" \
        --authorized-networks "${cluster_ip}/32,0.0.0.0/0"

    #TODO: get proper cluster ip auth working and remove 0.0.0.0/0

    drone_db_host=$(gcloud sql instances list | grep drone-${project} | awk '{print $5}')
else
    echo "Found sql instance drone-${project}."
fi

gcloud sql users list --instance=drone-${project} | grep -E "^${drone_db_user}\s" > /dev/null
if [ "$?" = "0" ]; then
    echo "Found sql user ${drone_db_user}."
else
    echo "Creating sql user ${drone_db_user}..."
    gcloud sql users create \
        ${drone_db_user} \
        "%" \
        --instance=drone-${project} \
        --password=${drone_db_pass}
fi

# gcloud sql instances patch \
#     drone-${project} \
#     --authorized-networks "${cluster_ip}/32"


# set up service account for gcloud sql proxy
# gcloud iam service-accounts list | awk '{print $1}' | grep -E ^${drone_service_account_name}$

# if [ $? == "0" ]; then
#     echo "Found service account ${drone_service_account_name}."
# else
#     echo "Could not find cluster ${drone_service_account_name}, creating it..."
#     gcloud iam service-accounts create \
#         ${drone_service_account_name} \
#         --display-name ${drone_service_account_name}
# fi

# drone_service_account_email=$(gcloud iam service-accounts list | grep -E "^${drone_service_account_name}\s" | awk '{print $2}')

# if [ $drone_service_account_email == "" ]; then
#     echo "Unable to get service account for drone sql... this is a fatal error"
#     exit 1
# fi