#!/usr/bin/env bash

source ".env"

if [ "$?" != "0" ]; then
    echo "you must have a valid env_settings file mounted in /app/.env"
    exit 1
fi

chmod 600 /app/.env

gcloud config set project ${project}


# create kubernetes cluster
export cluster_ip=$(gcloud container clusters list | grep -E "^${name}\s" | awk '{print $4}')

if [ "$cluster_ip" = "" ]; then
    echo "Could not find cluster ${name}, creating it..."
    gcloud container clusters create \
        ${name} \
        --zone ${zone} \
        --machine-type ${machine_type} \
        --enable-autoscaling \
        --min-nodes ${min_nodes} \
        --max-nodes ${max_nodes}

    export cluster_ip=$(gcloud container clusters list | grep -E "^${name}\s" | awk '{print $4}')
else
    echo "Found cluster ${name}."
fi

case "$drone_database_driver" in
    sqlite3)
        export drone_database_source="/var/lib/drone/drone.sqlite"
        ;;

    mysql)
        # use source so script can write env variables
        source ./scripts/setup_sql_instance
        echo "drone_db_host: $drone_db_host"
        export drone_database_source="${drone_db_user}:${drone_db_pass}@tcp(${drone_db_host}:3306)/drone?parseTime=true"
        ;;
esac


gcloud container clusters get-credentials ${name} --zone ${zone} --project ${project}


# deploy traefik to kubernetes cluster

helm version --tiller-connection-timeout 5 | grep Server > /dev/null
if [ "$?" = "0" ]; then
    echo "Helm is already initialized"
else
    echo "Running helm init..."
    #TODO: setup security: https://docs.helm.sh/using_helm/#securing-your-helm-installation
    helm init

    #TODO: validate tiller is up before continuing
    echo "sleep to allow tiller to startup..."
    sleep 20
fi

kubectl get clusterrolebinding | grep add-on-cluster-admin > /dev/null

if [ "$?" = "0" ]; then
    echo "Found clusterrolebinding: add-on-cluster-admin"
else
    echo "Creating clusterrolebinding: add-on-cluster-admin..."
    kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default
fi

# setup conf variables for traefik
htpasswd_traefik_pass=$(echo $traefik_pass | htpasswd -in admin | awk -F":" '{print $2}')
export htpasswd_traefik_pass=${htpasswd_traefik_pass//$'\n'/}

if [ ! -f ssl/cert.pem ] || [ ! -f ssl/key.pem ]; then
    echo "Generating self-signed certificate"

    if [ ! -d ssl ]; then
        mkdir ssl
    fi

    cd ssl

    openssl genrsa -des3 -passout pass:x -out key.pem 2048

    cp key.pem key.pem.orig

    openssl rsa -passin pass:x -in key.pem.orig -out key.pem

    openssl req -new -key key.pem -out cert.csr -subj "/C=${ssl_c:-US}/ST=${ssl_st:-NC}/L=${ssl_l:-Mars Hill}/O=${ssl_o:-Interrobang Consulting}/OU=${ssl_ou:-staging}/CN=*.${ssl_cn:-interrobang.consulting}"

    openssl x509 -req -days ${SSL_DAYS:-3650} -in cert.csr -signkey key.pem -out cert.pem

    cd ..
fi

base64_ssl_key=$(cat ssl/key.pem | base64)
export base64_ssl_key=${base64_ssl_key//$'\n'/}

base64_ssl_cert=$(cat ssl/cert.pem | base64)
export base64_ssl_cert=${base64_ssl_cert//$'\n'/}

for filename in helm_templates/*; do
    cat ${filename} | envsubst > helm/$(basename ${filename})
done

external_ip=$(kubectl get svc traefik --namespace kube-system | grep traefik | awk '{print $4}')

if [ "$external_ip" = "" ]; then
    echo "Could not find traefik, creating it..."
    helm install --namespace kube-system --name traefik --values helm/traefik_helm.yml stable/traefik --wait

    external_ip=$(kubectl get svc traefik --namespace kube-system | grep traefik | awk '{print $4}')
else
    echo "Found traefik with ${external_ip}"
    read -p "Would you like to run upgrade?(y/N)" -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        helm upgrade --values helm/traefik_helm.yml traefik stable/traefik --wait
    fi
fi


# drone helm is in incubator, add repo
helm repo list | grep -E "^incubator" > /dev/null
if [ "$?" = "0" ]; then
    echo "Found helm repo: incubator"
else
    echo "Adding helm repo: incubator..."
    helm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator
fi


# use helm charts to deploy drone
helm ls --all drone | grep -E "^drone" > /dev/null
if [ "$?" = "0" ]; then
    echo "Found drone helm deployment..."
    read -p "Would you like to run upgrade?(y/N)" -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        helm upgrade --values helm/drone_helm.yml drone incubator/drone --wait
    fi
else
    echo "Helm install drone..."
    helm install --namespace drone --name drone --values helm/drone_helm.yml incubator/drone --wait
fi


# setup rbac account so drone can deploy to staging cluster
kubectl --namespace drone get serviceaccount | grep -E "^drone-deploy" > /dev/null
if [ "$?" = "0" ]; then
    echo "Service account drone-deploy already created"
else
    # have to give current user admin bindings
    gcloud_email=$(gcloud info | grep Account | grep -oE "\[(.+)\]")
    gcloud_email=${gcloud_email//$'['/}
    gcloud_email=${gcloud_email//$']'/}
    kubectl create clusterrolebinding drone-deploy-cluster-admin-binding --clusterrole=cluster-admin --user=${gcloud_email}

    kubectl apply -f ./k8s/rbac.yml

    # can remove admin bindings for current user after rbac is configured
    kubectl delete clusterrolebinding drone-deploy-cluster-admin-binding
fi


# gather information for drone secrets
drone_deploy_token_name=$(kubectl -n drone get secrets | grep drone-deploy-token | awk '{print $1}')

kube_server=$(kubectl cluster-info | grep "Kubernetes master" | awk '{print $6}')
kube_ca=$(kubectl -n drone get secret/${drone_deploy_token_name} -o yaml | grep -oE 'ca.crt: (.+)' | awk '{print $2}')
kube_token=$(kubectl -n drone get secret/${drone_deploy_token_name} -o yaml | grep -oE 'token: (.+)' | awk '{print $2}')

echo "

**********************************
Drone and Traefik have been deployed.

Add the following secrets to drone to use this cluster for deployment:
kube_server ${kube_server}

kube_token:
${kube_token}

kube_ca:
${kube_ca}

Set up the following in dns:
${traefik_host}.${domain}  A      ${external_ip}
${drone_host}.${domain}    CNAME  ${traefik_host}.${domain}

**********************************
"
